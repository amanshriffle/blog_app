Inspecting 94 files
CCCCCCCCCCCCCWCWCCCCCCCCCCCCCWCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCWCCCCCCCCCCCCCCCCCCCC

Offenses:

Gemfile:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
source "https://rubygems.org"
^
Gemfile:1:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
source "https://rubygems.org"
       ^^^^^^^^^^^^^^^^^^^^^^
Gemfile:4:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ruby "3.2.2"
     ^^^^^^^
Gemfile:7:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "rails", "~> 7.0.6"
    ^^^^^^^
Gemfile:7:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "rails", "~> 7.0.6"
             ^^^^^^^^^^
Gemfile:10:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "sprockets-rails"
    ^^^^^^^^^^^^^^^^^
Gemfile:12:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Stores the session data in a database using Active Record
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:13:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "activerecord-session_store"
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:16:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "sqlite3", "~> 1.4"
    ^^^^^^^^^
Gemfile:16:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "sqlite3", "~> 1.4"
               ^^^^^^^^
Gemfile:19:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "puma", "~> 5.0"
    ^^^^^^
Gemfile:19:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "puma", "~> 5.0"
            ^^^^^^^^
Gemfile:22:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "importmap-rails"
    ^^^^^^^^^^^^^^^^^
Gemfile:25:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "turbo-rails"
    ^^^^^^^^^^^^^
Gemfile:28:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "stimulus-rails"
    ^^^^^^^^^^^^^^^^
Gemfile:31:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "jbuilder"
    ^^^^^^^^^^
Gemfile:40:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "bcrypt", "~> 3.1.7"
    ^^^^^^^^
Gemfile:40:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "bcrypt", "~> 3.1.7"
              ^^^^^^^^^^
Gemfile:42:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#For token based authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:43:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "jwt"
    ^^^^^
Gemfile:46:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
    ^^^^^^^^^^^^^
Gemfile:46:34: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
                                 ^
Gemfile:46:62: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
                                                             ^
Gemfile:49:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "bootsnap", require: false
    ^^^^^^^^^^
Gemfile:51:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Serializer
^^^^^^^^^^^
Gemfile:52:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "active_model_serializers"
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:62:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
      ^^^^^^^
Gemfile:62:30: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
                             ^
Gemfile:62:50: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
                                                 ^
Gemfile:64:3: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
  #Automatic Rails code style checking tool.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:65:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "rubocop-rails", require: false
      ^^^^^^^^^^^^^^^
Gemfile:70:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "web-console"
      ^^^^^^^^^^^^^
Gemfile:80:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "capybara"
      ^^^^^^^^^^
Gemfile:81:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "selenium-webdriver"
      ^^^^^^^^^^^^^^^^^^^^
Gemfile:82:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "webdrivers"
      ^^^^^^^^^^^^
Rakefile:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Add your own tasks in files placed in lib/tasks ending in .rake,
^
Rakefile:4:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "config/application"
                 ^^^^^^^^^^^^^^^^^^^^
app/channels/application_cable/channel.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ApplicationCable
^
app/channels/application_cable/connection.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ApplicationCable
^
app/controllers/activities_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class ActivitiesController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/activities_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class ActivitiesController.
class ActivitiesController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/activities_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ActivitiesController < ApplicationController
^
app/controllers/activities_controller.rb:9:40: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
    render json: liked_blogs, include: [:user, :likes]
                                       ^^^^^^^^^^^^^^^
app/controllers/application_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class ApplicationController < ActionController::API ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/application_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class ApplicationController.
class ApplicationController < ActionController::API
^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/application_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationController < ActionController::API
^
app/controllers/application_controller.rb:10:30: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    header = request.headers["Authorization"]
                             ^^^^^^^^^^^^^^^
app/controllers/application_controller.rb:13:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      header = header.split(" ").last
                            ^^^
app/controllers/application_controller.rb:17:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      render json: { error: "Authorization failed, please use valid JWT." }, status: :unauthorized
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/application_controller.rb:25:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      render json: { error: "Please update your profile details first." }, status: :forbidden
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/authentication_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class AuthenticationController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/authentication_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class AuthenticationController.
class AuthenticationController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/authentication_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class AuthenticationController < ApplicationController
^
app/controllers/authentication_controller.rb:12:29: C: [Correctable] Style/HashSyntax: Omit the hash value.
      render json: { token: token }, status: :ok
                            ^^^^^
app/controllers/authentication_controller.rb:14:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      render json: { error: "Password is invalid" }, status: :unauthorized
                            ^^^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class BlogsController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class BlogsController.
class BlogsController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class BlogsController < ApplicationController
^
app/controllers/blogs_controller.rb:2:51: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  skip_before_action :authenticate_request, only: [:index, :show]
                                                  ^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:5:34: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_blog, only: [:show, :update, :destroy]
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:6:43: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :check_blog_author, only: [:update, :destroy]
                                          ^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:43:12: C: [Correctable] Rails/DynamicFindBy: Use find_by! instead of dynamic find_by_username!.
    user = User.find_by_username!(params[:username])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:51:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    blogs = Blog.where("title LIKE :key OR body LIKE :key", { key: key })
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/blogs_controller.rb:51:68: C: [Correctable] Style/HashSyntax: Omit the hash value.
    blogs = Blog.where("title LIKE :key OR body LIKE :key", { key: key })
                                                                   ^^^
app/controllers/blogs_controller.rb:67:5: C: [Correctable] Style/GuardClause: Use a guard clause (return if @blog.user_id == @current_user.id) instead of wrapping the code inside a conditional expression.
    unless @blog.user_id == @current_user.id
    ^^^^^^
app/controllers/blogs_controller.rb:68:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      raise ActiveRecord::ReadOnlyError, "Only author can edit or delete the blog."
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/comments_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CommentsController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/comments_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CommentsController.
class CommentsController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/comments_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CommentsController < ApplicationController
^
app/controllers/comments_controller.rb:4:37: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_comment, only: [:destroy, :update]
                                    ^^^^^^^^^^^^^^^^^^^
app/controllers/comments_controller.rb:5:46: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :check_comment_author, only: [:update, :destroy]
                                             ^^^^^^^^^^^^^^^^^^^
app/controllers/comments_controller.rb:26:45: C: [Correctable] Rails/HttpStatus: Prefer :unprocessable_entity over 422 to define HTTP status code.
      render json: @comment.errors, status: 422
                                            ^^^
app/controllers/comments_controller.rb:55:5: C: [Correctable] Style/GuardClause: Use a guard clause (return if @comment.user_id == @current_user.id) instead of wrapping the code inside a conditional expression.
    unless @comment.user_id == @current_user.id
    ^^^^^^
app/controllers/comments_controller.rb:56:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      raise ActiveRecord::ReadOnlyError, "Only author can edit or delete the comment."
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/comments_controller.rb:63:92: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      notify_user("#{@current_user.username} replied on your comment.", parent_comment.id, "Comment", parent_comment.user_id)
                                                                                           ^^^^^^^^^
app/controllers/comments_controller.rb:63:121: C: [Correctable] Layout/LineLength: Line is too long. [125/120]
      notify_user("#{@current_user.username} replied on your comment.", parent_comment.id, "Comment", parent_comment.user_id)
                                                                                                                        ^^^^^
app/controllers/comments_controller.rb:66:97: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      notify_user("#{@current_user.username} commented on your post (#{blog.title}).", blog.id, "Blog", blog.user_id)
                                                                                                ^^^^^^
app/controllers/concerns/json_web_token.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
require "jwt" ...
^^^^^^^^^^^^^
app/controllers/concerns/json_web_token.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "jwt"
^
app/controllers/concerns/json_web_token.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "jwt"
        ^^^^^
app/controllers/concerns/json_web_token.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for module JsonWebToken.
module JsonWebToken
^^^^^^^^^^^^^^^^^^^
app/controllers/concerns/notify_user.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
module NotifyUser ...
^^^^^^^^^^^^^^^^^
app/controllers/concerns/notify_user.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for module NotifyUser.
module NotifyUser
^^^^^^^^^^^^^^^^^
app/controllers/concerns/notify_user.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module NotifyUser
^
app/controllers/concerns/notify_user.rb:9:25: C: [Correctable] Style/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
      user_id: params[3],
                        ^
app/controllers/follows_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class FollowsController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/follows_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class FollowsController.
class FollowsController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/follows_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class FollowsController < ApplicationController
^
app/controllers/follows_controller.rb:3:34: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_user, only: [:list_followers, :list_following]
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/follows_controller.rb:10:89: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      notify_user("#{@current_user.username} started following you.", @current_user.id, "User", params[:user_id])
                                                                                        ^^^^^^
app/controllers/follows_controller.rb:24:28: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      render json: [error: "Unauthorized"], status: :unauthorized
                           ^^^^^^^^^^^^^^
app/controllers/follows_controller.rb:39:5: C: [Correctable] Style/ConditionalAssignment: Use the return of the conditional for variable assignment and comparison.
    if params[:username] == @current_user.username ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/follows_controller.rb:42:15: C: [Correctable] Rails/DynamicFindBy: Use find_by! instead of dynamic find_by_username!.
      @user = User.find_by_username!(params[:username])
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/likes_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class LikesController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/likes_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class LikesController.
class LikesController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^
app/controllers/likes_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class LikesController < ApplicationController
^
app/controllers/likes_controller.rb:9:99: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      notify_user("#{@current_user.username} liked on your post (#{@blog.title}).", like.blog_id, "Blog", @blog.user_id)
                                                                                                  ^^^^^^
app/controllers/likes_controller.rb:12:41: C: [Correctable] Rails/HttpStatus: Prefer :unprocessable_entity over 422 to define HTTP status code.
      render json: like.errors, status: 422
                                        ^^^
app/controllers/likes_controller.rb:17:12: C: [Correctable] Rails/DynamicFindBy: Use find_by! instead of dynamic find_by_user_id!.
    like = @blog.likes.find_by_user_id! @current_user.id
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/notifications_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class NotificationsController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/notifications_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class NotificationsController.
class NotificationsController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/notifications_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class NotificationsController < ApplicationController
^
app/controllers/notifications_controller.rb:10:5: W: [Correctable] Lint/UselessAssignment: Useless assignment to variable - notification. Did you mean notifications?
    notification = notifications.find(params[:id]).destroy
    ^^^^^^^^^^^^
app/controllers/profiles_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class ProfilesController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/profiles_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class ProfilesController.
class ProfilesController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/profiles_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ProfilesController < ApplicationController
^
app/controllers/profiles_controller.rb:2:44: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  skip_around_action :check_profile, only: [:show, :update]
                                           ^^^^^^^^^^^^^^^^
app/controllers/profiles_controller.rb:3:39: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  before_action :set_profile, except: [:index, :search]
                                      ^^^^^^^^^^^^^^^^^
app/controllers/profiles_controller.rb:11:45: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
    render json: @profile, include: { user: [:blogs, :followers, :following] }
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/profiles_controller.rb:18:45: C: [Correctable] Rails/HttpStatus: Prefer :unprocessable_entity over 422 to define HTTP status code.
      render json: @profile.errors, status: 422
                                            ^^^
app/controllers/profiles_controller.rb:24:40: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    users = Profile.joins(:user).where("users.username LIKE :key OR first_name LIKE :key OR last_name LIKE :key", { key: key })
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/profiles_controller.rb:24:121: C: [Correctable] Layout/LineLength: Line is too long. [127/120]
    users = Profile.joins(:user).where("users.username LIKE :key OR first_name LIKE :key OR last_name LIKE :key", { key: key })
                                                                                                                        ^^^^^^^
app/controllers/profiles_controller.rb:24:122: C: [Correctable] Style/HashSyntax: Omit the hash value.
    users = Profile.joins(:user).where("users.username LIKE :key OR first_name LIKE :key OR last_name LIKE :key", { key: key })
                                                                                                                         ^^^
app/controllers/profiles_controller.rb:36:46: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    @profile = Profile.joins(:user).find_by!("users.username" => params[:username])
                                             ^^^^^^^^^^^^^^^^
app/controllers/users_controller.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class UsersController < ApplicationController ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/users_controller.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class UsersController.
class UsersController < ApplicationController
^^^^^^^^^^^^^^^^^^^^^
app/controllers/users_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class UsersController < ApplicationController
^
app/controllers/users_controller.rb:13:7: W: [Correctable] Lint/UselessAssignment: Useless assignment to variable - profile.
      profile = @user.build_profile.save(validate: false)
      ^^^^^^^
app/controllers/users_controller.rb:17:44: C: [Correctable] Rails/HttpStatus: Prefer :unprocessable_entity over 422 to define HTTP status code.
      render json: [@user.errors], status: 422
                                           ^^^
app/controllers/users_controller.rb:25:50: C: [Correctable] Rails/HttpStatus: Prefer :unprocessable_entity over 422 to define HTTP status code.
      render json: @current_user.errors, status: 422
                                                 ^^^
app/helpers/application_helper.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for module ApplicationHelper.
module ApplicationHelper
^^^^^^^^^^^^^^^^^^^^^^^^
app/helpers/application_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ApplicationHelper
^
app/helpers/blogs_helper.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for module BlogsHelper.
module BlogsHelper
^^^^^^^^^^^^^^^^^^
app/helpers/blogs_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module BlogsHelper
^
app/helpers/comments_helper.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for module CommentsHelper.
module CommentsHelper
^^^^^^^^^^^^^^^^^^^^^
app/helpers/comments_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module CommentsHelper
^
app/helpers/logins_helper.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for module LoginsHelper.
module LoginsHelper
^^^^^^^^^^^^^^^^^^^
app/helpers/logins_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module LoginsHelper
^
app/helpers/profiles_helper.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for module ProfilesHelper.
module ProfilesHelper
^^^^^^^^^^^^^^^^^^^^^
app/helpers/profiles_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ProfilesHelper
^
app/jobs/application_job.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationJob < ActiveJob::Base
^
app/jobs/create_notification_job.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateNotificationJob.
class CreateNotificationJob < ApplicationJob
^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/jobs/create_notification_job.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateNotificationJob < ApplicationJob
^
app/jobs/create_notification_job.rb:4:3: C: Metrics/MethodLength: Method has too many lines. [11/10]
  def perform(blog) ...
  ^^^^^^^^^^^^^^^^^
app/jobs/create_notification_job.rb:13:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        refer_to_type: "Blog",
                       ^^^^^^
app/jobs/create_notification_job.rb:14:36: C: [Correctable] Style/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
        user_id: f.follower_user_id,
                                   ^
app/jobs/send_email_to_follower_users_job.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class SendEmailToFollowerUsersJob.
class SendEmailToFollowerUsersJob < ApplicationJob
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/jobs/send_email_to_follower_users_job.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class SendEmailToFollowerUsersJob < ApplicationJob
^
app/jobs/send_email_to_follower_users_job.rb:6:29: C: [Correctable] Style/HashSyntax: Omit the hash value.
      BlogMailer.with(user: user, blog: blog, follower_user: fu).new_blog_email.deliver
                            ^^^^
app/jobs/send_email_to_follower_users_job.rb:6:41: C: [Correctable] Style/HashSyntax: Omit the hash value.
      BlogMailer.with(user: user, blog: blog, follower_user: fu).new_blog_email.deliver
                                        ^^^^
app/mailers/application_mailer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class ApplicationMailer.
class ApplicationMailer < ActionMailer::Base
^^^^^^^^^^^^^^^^^^^^^^^
app/mailers/application_mailer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationMailer < ActionMailer::Base
^
app/mailers/application_mailer.rb:2:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  default from: "amanm@shriffle.com"
                ^^^^^^^^^^^^^^^^^^^^
app/mailers/blog_mailer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class BlogMailer.
class BlogMailer < ApplicationMailer
^^^^^^^^^^^^^^^^
app/mailers/blog_mailer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class BlogMailer < ApplicationMailer
^
app/mailers/user_mailer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class UserMailer.
class UserMailer < ApplicationMailer
^^^^^^^^^^^^^^^^
app/mailers/user_mailer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class UserMailer < ApplicationMailer
^
app/mailers/user_mailer.rb:5:36: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    mail(to: @user.email, subject: "Welcome to Our Awesome Site")
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/application_record.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class ApplicationRecord < ActiveRecord::Base ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/application_record.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class ApplicationRecord.
class ApplicationRecord < ActiveRecord::Base
^^^^^^^^^^^^^^^^^^^^^^^
app/models/application_record.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationRecord < ActiveRecord::Base
^
app/models/blog.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class Blog < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/blog.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Blog.
class Blog < ApplicationRecord
^^^^^^^^^^
app/models/blog.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Blog < ApplicationRecord
^
app/models/blog.rb:3:3: C: Rails/InverseOf: Specify an :inverse_of option.
  has_many :comments, -> { where(parent_comment_id: nil).order created_at: :desc }, dependent: :destroy
  ^^^^^^^^
app/models/blog.rb:7:3: C: Rails/UniqueValidationWithoutIndex: Uniqueness validation should have a unique index on the database column.
  validates :title, uniqueness: { case_sensitive: false }, length: { in: 5..150 }
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/comment.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class Comment < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/comment.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Comment.
class Comment < ApplicationRecord
^^^^^^^^^^^^^
app/models/comment.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Comment < ApplicationRecord
^
app/models/comment.rb:4:3: C: Rails/InverseOf: Specify an :inverse_of option.
  has_many :replies, class_name: "Comment", foreign_key: "parent_comment_id", dependent: :destroy
  ^^^^^^^^
app/models/comment.rb:4:34: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  has_many :replies, class_name: "Comment", foreign_key: "parent_comment_id", dependent: :destroy
                                 ^^^^^^^^^
app/models/comment.rb:4:58: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  has_many :replies, class_name: "Comment", foreign_key: "parent_comment_id", dependent: :destroy
                                                         ^^^^^^^^^^^^^^^^^^^
app/models/comment.rb:5:43: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  belongs_to :parent_comment, class_name: "Comment", optional: true
                                          ^^^^^^^^^
app/models/comment.rb:12:3: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
  #after_create :notify_user
  ^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/comment.rb:14:3: W: [Correctable] Lint/UselessAccessModifier: Useless private access modifier.
  private
  ^^^^^^^
app/models/followers_following.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class FollowersFollowing < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/followers_following.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class FollowersFollowing.
class FollowersFollowing < ApplicationRecord
^^^^^^^^^^^^^^^^^^^^^^^^
app/models/followers_following.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class FollowersFollowing < ApplicationRecord
^
app/models/followers_following.rb:2:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  self.table_name = "followers_following"
                    ^^^^^^^^^^^^^^^^^^^^^
app/models/followers_following.rb:5:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  belongs_to :follower_user, class_name: "User", inverse_of: :following
                                         ^^^^^^
app/models/followers_following.rb:14:5: C: [Correctable] Style/GuardClause: Use a guard clause (return unless follower_user_id == user_id) instead of wrapping the code inside a conditional expression.
    if follower_user_id == user_id
    ^^
app/models/followers_following.rb:14:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if follower_user_id == user_id
    ^^
app/models/followers_following.rb:15:37: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add :follower_user_id, "You can not follow yourself."
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/followers_following.rb:20:5: C: [Correctable] Style/GuardClause: Use a guard clause (return unless FollowersFollowing.find_by(user_id: user_id, follower_user_id: follower_user_id)) instead of wrapping the code inside a conditional expression.
    if FollowersFollowing.find_by(user_id: user_id, follower_user_id: follower_user_id)
    ^^
app/models/followers_following.rb:20:44: C: [Correctable] Style/HashSyntax: Omit the hash value.
    if FollowersFollowing.find_by(user_id: user_id, follower_user_id: follower_user_id)
                                           ^^^^^^^
app/models/followers_following.rb:20:71: C: [Correctable] Style/HashSyntax: Omit the hash value.
    if FollowersFollowing.find_by(user_id: user_id, follower_user_id: follower_user_id)
                                                                      ^^^^^^^^^^^^^^^^
app/models/followers_following.rb:21:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add :base, "You are already following."
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/like.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class Like < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/like.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Like.
class Like < ApplicationRecord
^^^^^^^^^^
app/models/like.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Like < ApplicationRecord
^
app/models/like.rb:12:5: C: [Correctable] Style/GuardClause: Use a guard clause (return unless Like.find_by(blog_id: blog_id, user_id: user_id)) instead of wrapping the code inside a conditional expression.
    if Like.find_by(blog_id: blog_id, user_id: user_id)
    ^^
app/models/like.rb:12:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if Like.find_by(blog_id: blog_id, user_id: user_id)
    ^^
app/models/like.rb:12:30: C: [Correctable] Style/HashSyntax: Omit the hash value.
    if Like.find_by(blog_id: blog_id, user_id: user_id)
                             ^^^^^^^
app/models/like.rb:12:48: C: [Correctable] Style/HashSyntax: Omit the hash value.
    if Like.find_by(blog_id: blog_id, user_id: user_id)
                                               ^^^^^^^
app/models/like.rb:13:28: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add :user_id, "You have already liked the blog"
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/notification.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class Notification < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/notification.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Notification.
class Notification < ApplicationRecord
^^^^^^^^^^^^^^^^^^
app/models/notification.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Notification < ApplicationRecord
^
app/models/notification.rb:12:54: C: [Correctable] Style/HashSyntax: Omit the hash value.
    find_not = Notification.where(notification_text: notification_text)
                                                     ^^^^^^^^^^^^^^^^^
app/models/notification.rb:14:5: C: [Correctable] Style/GuardClause: Use a guard clause (return if find_not.empty?) instead of wrapping the code inside a conditional expression.
    unless find_not.empty?
    ^^^^^^
app/models/notification.rb:14:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    unless find_not.empty?
    ^^^^^^
app/models/picture.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class Picture < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/picture.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Picture.
class Picture < ApplicationRecord
^^^^^^^^^^^^^
app/models/picture.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Picture < ApplicationRecord
^
app/models/profile.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class Profile < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/profile.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Profile.
class Profile < ApplicationRecord
^^^^^^^^^^^^^
app/models/profile.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Profile < ApplicationRecord
^
app/models/profile.rb:5:3: C: Rails/UniqueValidationWithoutIndex: Uniqueness validation should have a unique index on the database column.
  validates :user_id, uniqueness: true
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/profile.rb:7:87: C: [Correctable] Rails/Date: Do not use Date.today without zone. Use Time.zone.today instead.
  validates :date_of_birth, presence: true, comparison: { less_than_or_equal_to: Date.today - 18.year, message: "should be 18+ years old" }
                                                                                      ^^^^^
app/models/profile.rb:7:95: C: [Correctable] Rails/PluralizationGrammar: Prefer 18.years.
  validates :date_of_birth, presence: true, comparison: { less_than_or_equal_to: Date.today - 18.year, message: "should be 18+ years old" }
                                                                                              ^^^^^^^
app/models/profile.rb:7:113: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  validates :date_of_birth, presence: true, comparison: { less_than_or_equal_to: Date.today - 18.year, message: "should be 18+ years old" }
                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/profile.rb:7:121: C: [Correctable] Layout/LineLength: Line is too long. [139/120]
  validates :date_of_birth, presence: true, comparison: { less_than_or_equal_to: Date.today - 18.year, message: "should be 18+ years old" }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^
app/models/profile.rb:17:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if profile_picture.blob.byte_size >= 200.kilobytes
    ^^
app/models/profile.rb:18:36: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add(:profile_picture, "size must be less than 200kb.")
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/profile.rb:21:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    acceptable_types = ["image/jpeg", "image/png"]
                        ^^^^^^^^^^^^
app/models/profile.rb:21:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    acceptable_types = ["image/jpeg", "image/png"]
                                      ^^^^^^^^^^^
app/models/profile.rb:23:5: C: [Correctable] Style/GuardClause: Use a guard clause (return if acceptable_types.include?(profile_picture.content_type)) instead of wrapping the code inside a conditional expression.
    unless acceptable_types.include?(profile_picture.content_type)
    ^^^^^^
app/models/profile.rb:23:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    unless acceptable_types.include?(profile_picture.content_type)
    ^^^^^^
app/models/profile.rb:24:36: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add(:profile_picture, "must be a JPEG or PNG")
                                   ^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class User < ApplicationRecord ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class User.
class User < ApplicationRecord
^^^^^^^^^^
app/models/user.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class User < ApplicationRecord
^
app/models/user.rb:7:3: C: Rails/InverseOf: Specify an :inverse_of option.
  has_many :notifications, -> { order created_at: :desc }, dependent: :destroy
  ^^^^^^^^
app/models/user.rb:8:3: C: Rails/InverseOf: Specify an :inverse_of option.
  has_many :followers, -> { select :id, :follower_user_id }, class_name: "FollowersFollowing", dependent: :destroy
  ^^^^^^^^
app/models/user.rb:8:74: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  has_many :followers, -> { select :id, :follower_user_id }, class_name: "FollowersFollowing", dependent: :destroy
                                                                         ^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:9:65: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  has_many :following, -> { select :id, :user_id }, class_name: "FollowersFollowing", foreign_key: :follower_user_id, dependent: :destroy, inverse_of: :follower_user
                                                                ^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:9:121: C: [Correctable] Layout/LineLength: Line is too long. [165/120]
  has_many :following, -> { select :id, :user_id }, class_name: "FollowersFollowing", foreign_key: :follower_user_id, dependent: :destroy, inverse_of: :follower_user
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:16:3: C: Rails/UniqueValidationWithoutIndex: Uniqueness validation should have a unique index on the database column.
  validates :username, uniqueness: { case_sesitive: false }, length: { in: 3..10 }, format: { with: /\A[a-zA-Z][A-Za-z0-9_]+\z/, message: "can only contain characters, digit and uderscore." }
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:16:121: C: [Correctable] Layout/LineLength: Line is too long. [191/120]
  validates :username, uniqueness: { case_sesitive: false }, length: { in: 3..10 }, format: { with: /\A[a-zA-Z][A-Za-z0-9_]+\z/, message: "can only contain characters, digit and uderscore." }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:16:139: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  validates :username, uniqueness: { case_sesitive: false }, length: { in: 3..10 }, format: { with: /\A[a-zA-Z][A-Za-z0-9_]+\z/, message: "can only contain characters, digit and uderscore." }
                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:17:3: C: Rails/UniqueValidationWithoutIndex: Uniqueness validation should have a unique index on the database column.
  validates :email, uniqueness: { case_sesitive: false }, length: { in: 5..30 }, format: { with: /\A[a-z][\w\d+\-.]+@[\w\d\-]+\.[a-z]{2,3}\z/ }
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:17:121: C: [Correctable] Layout/LineLength: Line is too long. [143/120]
  validates :email, uniqueness: { case_sesitive: false }, length: { in: 5..30 }, format: { with: /\A[a-z][\w\d+\-.]+@[\w\d\-]+\.[a-z]{2,3}\z/ }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:17:123: C: [Correctable] Style/RedundantRegexpEscape: Redundant escape inside regexp literal
  validates :email, uniqueness: { case_sesitive: false }, length: { in: 5..30 }, format: { with: /\A[a-z][\w\d+\-.]+@[\w\d\-]+\.[a-z]{2,3}\z/ }
                                                                                                                          ^^
app/models/user.rb:18:114: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  validates :password, format: { with: /\A(?=.{6,15})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[[:^alnum:]])/, message: "must be min. 6 chars long and must contain atleast one alphabet, a digit and a special character." }
                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/user.rb:18:121: C: [Correctable] Layout/LineLength: Line is too long. [214/120]
  validates :password, format: { with: /\A(?=.{6,15})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[[:^alnum:]])/, message: "must be min. 6 chars long and must contain atleast one alphabet, a digit and a special character." }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/serializers/blog_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class BlogSerializer.
class BlogSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^
app/serializers/blog_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class BlogSerializer < ActiveModel::Serializer
^
app/serializers/comment_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CommentSerializer.
class CommentSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^^^^
app/serializers/comment_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CommentSerializer < ActiveModel::Serializer
^
app/serializers/follow_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class FollowSerializer.
class FollowSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^^^
app/serializers/follow_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class FollowSerializer < ActiveModel::Serializer
^
app/serializers/like_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class LikeSerializer.
class LikeSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^
app/serializers/like_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class LikeSerializer < ActiveModel::Serializer
^
app/serializers/like_serializer.rb:5:5: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    self.object.user.username
    ^^^^
app/serializers/notification_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class NotificationSerializer.
class NotificationSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/serializers/notification_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class NotificationSerializer < ActiveModel::Serializer
^
app/serializers/profile_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class ProfileSerializer.
class ProfileSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^^^^
app/serializers/profile_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ProfileSerializer < ActiveModel::Serializer
^
app/serializers/profile_serializer.rb:10:5: C: [Correctable] Style/GuardClause: Use a guard clause (return nil unless profile_picture.attached?) instead of wrapping the code inside a conditional expression.
    if profile_picture.attached?
    ^^
app/serializers/profile_serializer.rb:11:7: C: [Correctable] Style/StringConcatenation: Prefer string interpolation to string concatenation.
      "http://127.0.0.1:3000" + rails_blob_path(profile_picture, host: "localhost:3000")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/serializers/profile_serializer.rb:11:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      "http://127.0.0.1:3000" + rails_blob_path(profile_picture, host: "localhost:3000")
      ^^^^^^^^^^^^^^^^^^^^^^^
app/serializers/profile_serializer.rb:11:72: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      "http://127.0.0.1:3000" + rails_blob_path(profile_picture, host: "localhost:3000")
                                                                       ^^^^^^^^^^^^^^^^
app/serializers/profile_serializer.rb:13:7: C: [Correctable] Style/RedundantReturn: Redundant return detected.
      return nil
      ^^^^^^
app/serializers/user_serializer.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class UserSerializer.
class UserSerializer < ActiveModel::Serializer
^^^^^^^^^^^^^^^^^^^^
app/serializers/user_serializer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class UserSerializer < ActiveModel::Serializer
^
config.ru:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# This file is used by Rack-based servers to start the application.
^
config.ru:3:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "config/environment"
                 ^^^^^^^^^^^^^^^^^^^^
config/application.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require_relative "boot"
^
config/application.rb:1:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "boot"
                 ^^^^^^
config/application.rb:3:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails/all"
        ^^^^^^^^^^^
config/application.rb:10:3: C: Style/Documentation: Missing top-level documentation comment for class BlogApp::Application.
  class Application < Rails::Application
  ^^^^^^^^^^^^^^^^^
config/application.rb:14:5: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
    #config.active_job.queue_adapter = :sidekiq
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/boot.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)
^
config/boot.rb:1:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)
    ^^^^^^^^^^^^^^^^
config/boot.rb:1:44: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)
                                           ^^^^^^^^^^^^
config/boot.rb:3:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "bundler/setup" # Set up gems listed in the Gemfile.
        ^^^^^^^^^^^^^^^
config/boot.rb:4:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.
        ^^^^^^^^^^^^^^^^
config/environment.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Load the Rails application.
^
config/environment.rb:2:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "application"
                 ^^^^^^^^^^^^^
config/environments/development.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "active_support/core_ext/integer/time"
^
config/environments/development.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "active_support/core_ext/integer/time"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/environments/development.rb:3:1: C: Metrics/BlockLength: Block has too many lines. [37/25]
Rails.application.configure do ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/environments/development.rb:22:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  if Rails.root.join("tmp/caching-dev.txt").exist?
                     ^^^^^^^^^^^^^^^^^^^^^
config/environments/development.rb:28:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      "Cache-Control" => "public, max-age=#{2.days.to_i}",
      ^^^^^^^^^^^^^^^
config/environments/development.rb:28:58: C: [Correctable] Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
      "Cache-Control" => "public, max-age=#{2.days.to_i}",
                                                         ^
config/environments/development.rb:45:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :host => "localhost:3000",
    ^^^^^^^^
config/environments/development.rb:45:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    :host => "localhost:3000",
             ^^^^^^^^^^^^^^^^
config/environments/development.rb:46:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :protocol => "http",
    ^^^^^^^^^^^^
config/environments/development.rb:46:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    :protocol => "http",
                 ^^^^^^
config/environments/development.rb:46:24: C: [Correctable] Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    :protocol => "http",
                       ^
config/environments/development.rb:50:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :address => "smtp.gmail.com",
    ^^^^^^^^^^^
config/environments/development.rb:50:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    :address => "smtp.gmail.com",
                ^^^^^^^^^^^^^^^^
config/environments/development.rb:51:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :port => 587,
    ^^^^^^^^
config/environments/development.rb:52:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :user_name => "amanm@shriffle.com",
    ^^^^^^^^^^^^^
config/environments/development.rb:52:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    :user_name => "amanm@shriffle.com",
                  ^^^^^^^^^^^^^^^^^^^^
config/environments/development.rb:53:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :password => "ucxdvnxoxqlcqiqq",
    ^^^^^^^^^^^^
config/environments/development.rb:53:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    :password => "ucxdvnxoxqlcqiqq",
                 ^^^^^^^^^^^^^^^^^^
config/environments/development.rb:54:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :authentication => "plain",
    ^^^^^^^^^^^^^^^^^^
config/environments/development.rb:54:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    :authentication => "plain",
                       ^^^^^^^
config/environments/development.rb:55:5: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    :enable_starttls_auto => true,
    ^^^^^^^^^^^^^^^^^^^^^^^^
config/environments/development.rb:55:34: C: [Correctable] Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    :enable_starttls_auto => true,
                                 ^
config/environments/production.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "active_support/core_ext/integer/time"
^
config/environments/production.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "active_support/core_ext/integer/time"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/environments/production.rb:25:43: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  config.public_file_server.enabled = ENV["RAILS_SERVE_STATIC_FILES"].present?
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
config/environments/production.rb:56:22: C: [Correctable] Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
  config.log_tags = [ :request_id ]
                     ^
config/environments/production.rb:56:34: C: Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
  config.log_tags = [ :request_id ]
                                 ^
config/environments/production.rb:85:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  if ENV["RAILS_LOG_TO_STDOUT"].present?
         ^^^^^^^^^^^^^^^^^^^^^
config/environments/production.rb:86:50: C: [Correctable] Style/GlobalStdStream: Use $stdout instead of STDOUT.
    logger           = ActiveSupport::Logger.new(STDOUT)
                                                 ^^^^^^
config/environments/test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "active_support/core_ext/integer/time"
^
config/environments/test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "active_support/core_ext/integer/time"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/environments/test.rb:17:27: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  config.eager_load = ENV["CI"].present?
                          ^^^^
config/environments/test.rb:22:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    "Cache-Control" => "public, max-age=#{1.hour.to_i}"
    ^^^^^^^^^^^^^^^
config/importmap.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Pin npm packages by running ./bin/importmap
^
config/importmap.rb:3:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "application", preload: true
    ^^^^^^^^^^^^^
config/importmap.rb:4:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "@hotwired/turbo-rails", to: "turbo.min.js", preload: true
    ^^^^^^^^^^^^^^^^^^^^^^^
config/importmap.rb:4:34: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "@hotwired/turbo-rails", to: "turbo.min.js", preload: true
                                 ^^^^^^^^^^^^^^
config/importmap.rb:5:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "@hotwired/stimulus", to: "stimulus.min.js", preload: true
    ^^^^^^^^^^^^^^^^^^^^
config/importmap.rb:5:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "@hotwired/stimulus", to: "stimulus.min.js", preload: true
                              ^^^^^^^^^^^^^^^^^
config/importmap.rb:6:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js", preload: true
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/importmap.rb:6:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js", preload: true
                                      ^^^^^^^^^^^^^^^^^^^^^
config/importmap.rb:7:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin_all_from "app/javascript/controllers", under: "controllers"
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/importmap.rb:7:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pin_all_from "app/javascript/controllers", under: "controllers"
                                                  ^^^^^^^^^^^^^
config/initializers/assets.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Be sure to restart your server when you modify this file.
^
config/initializers/assets.rb:4:43: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Rails.application.config.assets.version = "1.0"
                                          ^^^^^
config/initializers/content_security_policy.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Be sure to restart your server when you modify this file.
^
config/initializers/filter_parameter_logging.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Be sure to restart your server when you modify this file.
^
config/initializers/filter_parameter_logging.rb:6:47: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
Rails.application.config.filter_parameters += [ ...
                                              ^
config/initializers/inflections.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Be sure to restart your server when you modify this file.
^
config/initializers/permissions_policy.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Define an application-wide HTTP permissions policy. For further
^
config/puma.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Puma can serve each request in a thread from an internal thread pool.
^
config/puma.rb:7:25: C: [Correctable] Style/RedundantFetchBlock: Use fetch("RAILS_MAX_THREADS", 5) instead of fetch("RAILS_MAX_THREADS") { 5 }.
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/puma.rb:7:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
                              ^^^^^^^^^^^^^^^^^^^
config/puma.rb:8:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
                              ^^^^^^^^^^^^^^^^^^^
config/puma.rb:14:34: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"
                                 ^^^^^^^^^^^
config/puma.rb:14:47: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"
                                              ^^^^^^^^^^^^^
config/puma.rb:14:65: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"
                                                                ^^^^^^^^^^^^^
config/puma.rb:18:10: C: [Correctable] Style/RedundantFetchBlock: Use fetch("PORT", 3000) instead of fetch("PORT") { 3000 }.
port ENV.fetch("PORT") { 3000 }
         ^^^^^^^^^^^^^^^^^^^^^^
config/puma.rb:18:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
port ENV.fetch("PORT") { 3000 }
               ^^^^^^
config/puma.rb:22:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
environment ENV.fetch("RAILS_ENV") { "development" }
                      ^^^^^^^^^^^
config/puma.rb:22:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
environment ENV.fetch("RAILS_ENV") { "development" }
                                     ^^^^^^^^^^^^^
config/puma.rb:25:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }
                  ^^^^^^^^^
config/puma.rb:25:32: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }
                               ^^^^^^^^^^^^^^^^^^^^^
config/routes.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
Rails.application.routes.draw do ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
config/routes.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Rails.application.routes.draw do
^
config/routes.rb:2:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  root "blogs#index"
       ^^^^^^^^^^^^^
config/routes.rb:3:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  post "/login", to: "authentication#login"
       ^^^^^^^^
config/routes.rb:3:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  post "/login", to: "authentication#login"
                     ^^^^^^^^^^^^^^^^^^^^^^
config/routes.rb:4:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  post "/signup", to: "users#create"
       ^^^^^^^^^
config/routes.rb:4:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  post "/signup", to: "users#create"
                      ^^^^^^^^^^^^^^
config/routes.rb:7:27: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  resource :follow, only: [:create, :destroy]
                          ^^^^^^^^^^^^^^^^^^^
config/routes.rb:8:35: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  resources :notifications, only: [:index, :destroy]
                                  ^^^^^^^^^^^^^^^^^^
config/routes.rb:10:30: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  resources :profiles, only: [:index, :show, :update], param: :username do
                             ^^^^^^^^^^^^^^^^^^^^^^^^
config/routes.rb:11:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    post "/search", action: "search", on: :collection
         ^^^^^^^^^
config/routes.rb:11:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    post "/search", action: "search", on: :collection
                            ^^^^^^^^
config/routes.rb:13:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/blogs", to: "blogs#user_blogs", as: :user_blogs
          ^^^^^^^^
config/routes.rb:13:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/blogs", to: "blogs#user_blogs", as: :user_blogs
                        ^^^^^^^^^^^^^^^^^^
config/routes.rb:14:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/followers", to: "follows#list_followers"
          ^^^^^^^^^^^^
config/routes.rb:14:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/followers", to: "follows#list_followers"
                            ^^^^^^^^^^^^^^^^^^^^^^^^
config/routes.rb:15:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/following", to: "follows#list_following"
          ^^^^^^^^^^^^
config/routes.rb:15:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/following", to: "follows#list_following"
                            ^^^^^^^^^^^^^^^^^^^^^^^^
config/routes.rb:21:27: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
    resource :like, only: [:create, :destroy]
                          ^^^^^^^^^^^^^^^^^^^
config/routes.rb:22:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    post "/search", action: "search", on: :collection
         ^^^^^^^^^
config/routes.rb:22:29: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    post "/search", action: "search", on: :collection
                            ^^^^^^^^
config/routes.rb:25:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  scope "/activity", controller: "activities", as: :activity do
        ^^^^^^^^^^^
config/routes.rb:25:34: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  scope "/activity", controller: "activities", as: :activity do
                                 ^^^^^^^^^^^^
config/routes.rb:26:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    get "/drafts", action: :drafts
        ^^^^^^^^^
config/routes.rb:27:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    get "/blogs", action: :blogs
        ^^^^^^^^
config/routes.rb:28:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    get "/likes", action: :likes
        ^^^^^^^^
config/routes.rb:29:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    get "/comments", action: :comments
        ^^^^^^^^^^^
db/migrate/20230726123924_create_users.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateUsers < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726123924_create_users.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateUsers.
class CreateUsers < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^
db/migrate/20230726123924_create_users.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateUsers < ActiveRecord::Migration[7.0]
^
db/migrate/20230726123929_create_blogs.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateBlogs < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726123929_create_blogs.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateBlogs.
class CreateBlogs < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^
db/migrate/20230726123929_create_blogs.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateBlogs < ActiveRecord::Migration[7.0]
^
db/migrate/20230726124040_create_comments.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateComments < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726124040_create_comments.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateComments.
class CreateComments < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726124040_create_comments.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateComments < ActiveRecord::Migration[7.0]
^
db/migrate/20230726124057_create_likes.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateLikes < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726124057_create_likes.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateLikes.
class CreateLikes < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^
db/migrate/20230726124057_create_likes.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateLikes < ActiveRecord::Migration[7.0]
^
db/migrate/20230726124131_create_pictures.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreatePictures < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726124131_create_pictures.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreatePictures.
class CreatePictures < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^
db/migrate/20230726124131_create_pictures.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreatePictures < ActiveRecord::Migration[7.0]
^
db/migrate/20230727090147_remove_foreign_key_from_blogs_likes_comments.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class RemoveForeignKeyFromBlogsLikesComments < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727090147_remove_foreign_key_from_blogs_likes_comments.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class RemoveForeignKeyFromBlogsLikesComments.
class RemoveForeignKeyFromBlogsLikesComments < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727090147_remove_foreign_key_from_blogs_likes_comments.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class RemoveForeignKeyFromBlogsLikesComments < ActiveRecord::Migration[7.0]
^
db/migrate/20230727090147_remove_foreign_key_from_blogs_likes_comments.rb:3:5: C: Rails/ReversibleMigration: remove_foreign_key(without table) is not reversible.
    remove_foreign_key :blogs, column: :user_id
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727090147_remove_foreign_key_from_blogs_likes_comments.rb:4:5: C: Rails/ReversibleMigration: remove_foreign_key(without table) is not reversible.
    remove_foreign_key :likes, column: :user_id
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727090147_remove_foreign_key_from_blogs_likes_comments.rb:5:5: C: Rails/ReversibleMigration: remove_foreign_key(without table) is not reversible.
    remove_foreign_key :comments, column: :user_id
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727091033_add_foreign_key_to_blogs_likes_comments.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class AddForeignKeyToBlogsLikesComments < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727091033_add_foreign_key_to_blogs_likes_comments.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class AddForeignKeyToBlogsLikesComments.
class AddForeignKeyToBlogsLikesComments < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727091033_add_foreign_key_to_blogs_likes_comments.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class AddForeignKeyToBlogsLikesComments < ActiveRecord::Migration[7.0]
^
db/migrate/20230727121611_add_column_to_comment.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class AddColumnToComment < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727121611_add_column_to_comment.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class AddColumnToComment.
class AddColumnToComment < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230727121611_add_column_to_comment.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class AddColumnToComment < ActiveRecord::Migration[7.0]
^
db/migrate/20230728072116_create_followers_following.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateFollowersFollowing < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230728072116_create_followers_following.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateFollowersFollowing.
class CreateFollowersFollowing < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230728072116_create_followers_following.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateFollowersFollowing < ActiveRecord::Migration[7.0]
^
db/migrate/20230728072116_create_followers_following.rb:3:5: C: Rails/CreateTableWithTimestamps: Add timestamps when creating a new table.
    create_table :followers_following do |t| ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230731093312_create_notifications.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateNotifications < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230731093312_create_notifications.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateNotifications.
class CreateNotifications < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230731093312_create_notifications.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateNotifications < ActiveRecord::Migration[7.0]
^
db/migrate/20230814133004_add_password_to_users.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class AddPasswordToUsers < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230814133004_add_password_to_users.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class AddPasswordToUsers.
class AddPasswordToUsers < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230814133004_add_password_to_users.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class AddPasswordToUsers < ActiveRecord::Migration[7.0]
^
db/migrate/20230817044847_remove_details_from_users.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class RemoveDetailsFromUsers < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817044847_remove_details_from_users.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class RemoveDetailsFromUsers.
class RemoveDetailsFromUsers < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817044847_remove_details_from_users.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class RemoveDetailsFromUsers < ActiveRecord::Migration[7.0]
^
db/migrate/20230817044847_remove_details_from_users.rb:4:7: C: Rails/ReversibleMigration: t.remove (without type) is not reversible.
      t.remove :first_name, :last_name, :blogs_count
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817050717_create_profiles.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class CreateProfiles < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817050717_create_profiles.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class CreateProfiles.
class CreateProfiles < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817050717_create_profiles.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CreateProfiles < ActiveRecord::Migration[7.0]
^
db/migrate/20230817050717_create_profiles.rb:9:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      t.datetime "updated_at"
                 ^^^^^^^^^^^^
db/migrate/20230817130045_rename_columns_in_comments.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
class RenameColumnsInComments < ActiveRecord::Migration[7.0] ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817130045_rename_columns_in_comments.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class RenameColumnsInComments.
class RenameColumnsInComments < ActiveRecord::Migration[7.0]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230817130045_rename_columns_in_comments.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class RenameColumnsInComments < ActiveRecord::Migration[7.0]
^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# This migration comes from active_storage (originally 20170806125915)
^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:3:3: C: Metrics/AbcSize: Assignment Branch Condition size for change is too high. [<5, 29, 4> 29.7/17]
  def change ...
  ^^^^^^^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:3:3: C: Metrics/MethodLength: Method has too many lines. [34/10]
  def change ...
  ^^^^^^^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:22:16: C: [Correctable] Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
      t.index [ :key ], unique: true
               ^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:22:21: C: Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
      t.index [ :key ], unique: true
                    ^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:36:15: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
      t.index [ :record_type, :record_id, :name, :blob_id ], name: :index_active_storage_attachments_uniqueness, unique: true
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:36:16: C: [Correctable] Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
      t.index [ :record_type, :record_id, :name, :blob_id ], name: :index_active_storage_attachments_uniqueness, unique: true
               ^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:36:58: C: Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
      t.index [ :record_type, :record_id, :name, :blob_id ], name: :index_active_storage_attachments_uniqueness, unique: true
                                                         ^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:36:121: C: [Correctable] Layout/LineLength: Line is too long. [125/120]
      t.index [ :record_type, :record_id, :name, :blob_id ], name: :index_active_storage_attachments_uniqueness, unique: true
                                                                                                                        ^^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:44:15: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
      t.index [ :blob_id, :variation_digest ], name: :index_active_storage_variant_records_uniqueness, unique: true
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:44:16: C: [Correctable] Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
      t.index [ :blob_id, :variation_digest ], name: :index_active_storage_variant_records_uniqueness, unique: true
               ^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:44:44: C: Layout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
      t.index [ :blob_id, :variation_digest ], name: :index_active_storage_variant_records_uniqueness, unique: true
                                           ^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:49:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:50:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def primary_and_foreign_key_types
^^^^
db/migrate/20230824053456_create_active_storage_tables.active_storage.rb:50:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def primary_and_foreign_key_types ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:1:1: C: Layout/EndOfLine: Carriage return character detected.
#User ...
^^^^^
db/seeds.rb:1:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#User
^^^^^
db/seeds.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
#User
^
db/seeds.rb:7:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Profile
^^^^^^^^
db/seeds.rb:9:32: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  u.create_profile(first_name: "fname", last_name: "lname", date_of_birth: Date.today - (18 + i + 2).year - (i + 5).month, about: "Interested in ROR")
                               ^^^^^^^
db/seeds.rb:9:52: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  u.create_profile(first_name: "fname", last_name: "lname", date_of_birth: Date.today - (18 + i + 2).year - (i + 5).month, about: "Interested in ROR")
                                                   ^^^^^^^
db/seeds.rb:9:81: C: [Correctable] Rails/Date: Do not use Date.today without zone. Use Time.zone.today instead.
  u.create_profile(first_name: "fname", last_name: "lname", date_of_birth: Date.today - (18 + i + 2).year - (i + 5).month, about: "Interested in ROR")
                                                                                ^^^^^
db/seeds.rb:9:121: C: [Correctable] Layout/LineLength: Line is too long. [150/120]
  u.create_profile(first_name: "fname", last_name: "lname", date_of_birth: Date.today - (18 + i + 2).year - (i + 5).month, about: "Interested in ROR")
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:9:131: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  u.create_profile(first_name: "fname", last_name: "lname", date_of_birth: Date.today - (18 + i + 2).year - (i + 5).month, about: "Interested in ROR")
                                                                                                                                  ^^^^^^^^^^^^^^^^^^^
db/seeds.rb:12:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Followers_Following
^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:19:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Blog
^^^^^
db/seeds.rb:20:1: C: [Correctable] Style/CombinableLoops: Combine this loop with the previous loop.
User.all.each do |u, i| ...
^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:20:22: W: [Correctable] Lint/UnusedBlockArgument: Unused block argument - i. If it's necessary, use _ or _i as an argument name to indicate that it won't be used.
User.all.each do |u, i|
                     ^
db/seeds.rb:23:121: C: [Correctable] Layout/LineLength: Line is too long. [126/120]
    u.blogs.create({ title: "Blog no. #{bn} of #{u.username}", body: "Welcome to blog#{bn} of #{u.username}", visible: true })
                                                                                                                        ^^^^^^
db/seeds.rb:27:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Comment
^^^^^^^^
db/seeds.rb:34:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Replies on comment
^^^^^^^^^^^^^^^^^^^
db/seeds.rb:35:1: C: [Correctable] Style/CombinableLoops: Combine this loop with the previous loop.
Blog.all.each do |b| ...
^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:43:1: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
#Like
^^^^^
db/seeds.rb:44:1: C: [Correctable] Style/CombinableLoops: Combine this loop with the previous loop.
Blog.all.each do |b| ...
^^^^^^^^^^^^^^^^^^^^
test/application_system_test_case.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/application_system_test_case.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/channels/application_cable/connection_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/channels/application_cable/connection_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/channels/application_cable/connection_test.rb:3:7: C: [Correctable] Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class ApplicationCable::ConnectionTest < ActionCable::Connection::TestCase
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/authentication_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/authentication_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/blogs_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/blogs_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/comments_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/comments_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/logins_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/logins_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/jobs/create_notification_job_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/jobs/create_notification_job_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/jobs/send_email_to_follower_users_job_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/jobs/send_email_to_follower_users_job_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/mailers/blog_mailer_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/mailers/blog_mailer_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/mailers/previews/blog_mailer_preview.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Preview all emails at http://localhost:3000/rails/mailers/blog_mailer
^
test/mailers/previews/blog_mailer_preview.rb:3:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
test/mailers/previews/user_mailer_preview.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# Preview all emails at http://localhost:3000/rails/mailers/user_mailer
^
test/mailers/previews/user_mailer_preview.rb:3:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.
test/mailers/user_mailer_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/mailers/user_mailer_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/blog_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/blog_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/comment_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/comment_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/like_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/like_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/notification_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/notification_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/picture_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/picture_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/user_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/user_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/users_profile_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/users_profile_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/test_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
ENV["RAILS_ENV"] ||= "test"
^
test/test_helper.rb:1:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ENV["RAILS_ENV"] ||= "test"
    ^^^^^^^^^^^
test/test_helper.rb:1:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ENV["RAILS_ENV"] ||= "test"
                     ^^^^^^
test/test_helper.rb:2:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "../config/environment"
                 ^^^^^^^^^^^^^^^^^^^^^^^
test/test_helper.rb:3:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails/test_help"
        ^^^^^^^^^^^^^^^^^
test/test_helper.rb:5:7: C: [Correctable] Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class ActiveSupport::TestCase
      ^^^^^^^^^^^^^^^^^^^^^^^

94 files inspected, 476 offenses detected, 365 offenses autocorrectable

Tip: Based on detected gems, the following RuboCop extension libraries might be helpful:
  * rubocop-capybara (https://rubygems.org/gems/rubocop-capybara)

You can opt out of this message by adding the following to your config (see https://docs.rubocop.org/rubocop/extensions.html#extension-suggestions for more options):
  AllCops:
    SuggestExtensions: false
